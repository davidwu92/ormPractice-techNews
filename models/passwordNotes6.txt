NOTES PT. 6

In our User model, we'll use bcrypt to hash passwords before storing them.
This needs to happen before new user data is created (or updated) in the db.
So we put HOOKS (functions dictating lifecycle events) into the 2nd, table-config object of model.init()

  bcrypt.hash( oldpassword, 10 )
  ~10 is the saltRound value.
  ~Takes some time to return the hash, so await its completion.


Hashing takes CPU, so we must use async/await functions in our hooks.

Hooks we're using:

1. beforeCreate() runs before creating/storing a new row of data

2. beforeUpdate() runs before updating a row
    ~for this to work, the PUT ROUTE (User.update) needs option {individualHooks: true}


~~~~LOGGING IN and PASSWORD AUTH~~~~~

First write a POST route in user-routes.js (/api/users/login), which expects an object w/ email + password.

Then we should create an INSTANCE METHOD on the User model definition to access the password property
of each user instance.
    1. Give the model a method called checkPassword that expects a plaintext password. Done in User.js
    2. In that function, use
        bcrypt.compareSync(plaintextPassword, hash) //returns true if correct password
    3. Call on that method in the login route.



ENDED AT
 https://bootcampspot.instructure.com/courses/224/pages/13-dot-3-1-introduction?module_item_id=34606